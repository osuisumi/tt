<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.haoyu.ncts.course.dao.impl.mybatis.CourseAuthorizeMapper">
	<resultMap id="BaseResultMap" type="com.haoyu.ncts.course.entity.CourseAuthorize">
		<id column="ID" property="id" jdbcType="VARCHAR" />
		<result column="USER_ID" property="user.id" jdbcType="VARCHAR" />
		<result column="REAL_NAME" property="user.realName" jdbcType="VARCHAR" />
		<result column="AVATAR" property="user.avatar" jdbcType="VARCHAR" />
		<result column="ROLE" property="role" jdbcType="VARCHAR" />
		<result column="CREATOR" property="creator.id" jdbcType="VARCHAR" />
		<result column="CREATE_TIME" property="createTime" jdbcType="TIMESTAMP" />
		
		<result column="COURSE_ID" property="course.id" jdbcType="VARCHAR" />
		<result column="TITLE" property="course.title" jdbcType="VARCHAR" />
		<result column="CODE" property="course.code" jdbcType="VARCHAR" />
	</resultMap>
	<sql id="BaseSelectSql">
		select CA.ID, CA.COURSE_ID, CA.USER_ID, CA.ROLE, CA.CREATOR, CA.CREATE_TIME,
		C.TITLE, C.CODE,
		(select BUV.REAL_NAME from BASE_USER_VIEW BUV where BUV.ID = CA.USER_ID) REAL_NAME,
		(select BUV.AVATAR from BASE_USER_VIEW BUV where BUV.ID = CA.USER_ID) AVATAR
	</sql>
	<sql id="BaseFromSql">
		from COURSE_AUTHORIZE CA
		join COURSE C
		on C.ID = CA.COURSE_ID
		and C.IS_DELETED = 'N'
	</sql>
	<sql id="BaseWhereSql">
		<choose>
			<when test="isDeleted != null and isDeleted != ''">
				where CA.IS_DELETED = #{isDeleted}
			</when>
			<otherwise>
				where CA.IS_DELETED = 'N'
			</otherwise>
		</choose>
		<if test="role != null and role != ''">
			and CA.ROLE = #{role}
		</if>
		<if test="state != null and state != ''">
			and CA.STATE = #{state}
		</if>
		<if test="courseId != null and courseId != ''">
			and CA.COURSE_ID = #{courseId}
		</if>
		<if test="userId != null and userId != ''">
			and CA.USER_ID = #{userId}
		</if>
	</sql>
	<select id="select" parameterType="map" resultMap="BaseResultMap">
		<include refid="BaseSelectSql" />
		<include refid="BaseFromSql" />
		<include refid="BaseWhereSql" />
	</select>
	<insert id="insert" parameterType="com.haoyu.ncts.course.entity.CourseAuthorize">
		insert into COURSE_AUTHORIZE
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				ID,
			</if>
			<if test="course != null and course.id != null">
				COURSE_ID,
			</if>
			<if test="user != null and user.id != null">
				USER_ID,
			</if>
			<if test="role != null">
				ROLE,
			</if>
			<if test="state != null">
				STATE,
			</if>
			<if test="creator != null">
				CREATOR,
			</if>
			<if test="createTime != null">
				CREATE_TIME,
			</if>
			<if test="updatedby != null">
				UPDATEDBY,
			</if>
			<if test="updateTime != null">
				UPDATE_TIME,
			</if>
			<if test="isDeleted != null">
				IS_DELETED,
			</if>
			<if test="version != null">
				VERSION,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=VARCHAR},
			</if>
			<if test="course != null and course.id != null">
				#{course.id,jdbcType=VARCHAR},
			</if>
			<if test="user != null and user.id != null">
				#{user.id,jdbcType=VARCHAR},
			</if>
			<if test="role != null">
				#{role,jdbcType=VARCHAR},
			</if>
			<if test="state != null">
				#{state,jdbcType=VARCHAR},
			</if>
			<if test="creator != null">
				#{creator.id,jdbcType=VARCHAR},
			</if>
			<if test="createTime != null">
				#{createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="updatedby != null">
				#{updatedby.id,jdbcType=VARCHAR},
			</if>
			<if test="updateTime != null">
				#{updateTime,jdbcType=TIMESTAMP},
			</if>
			<if test="isDeleted != null">
				#{isDeleted,jdbcType=VARCHAR},
			</if>
			<if test="version != null">
				#{version,jdbcType=DECIMAL},
			</if>
		</trim>
	</insert>
	<insert id="insertBatch" parameterType="map">
		insert into COURSE_AUTHORIZE(ID, COURSE_ID, USER_ID, ROLE, CREATOR, CREATE_TIME, IS_DELETED, VERSION) 
		<if test="uids != null">
			select ${entity.id}, #{entity.course.id, jdbcType=VARCHAR}, ID, #{entity.role, jdbcType=VARCHAR}, #{entity.creator.id, jdbcType=VARCHAR},
			#{entity.createTime, jdbcType=DECIMAL}, #{entity.isDeleted, jdbcType=CHAR}, #{entity.version, jdbcType=DECIMAL}  
			from BASE_USER_VIEW 
			where ID in 
			<foreach collection="uids" open="(" close=")" separator="," item="item">
				#{item}
			</foreach>
		</if>
		<if test="cids != null">
			select ${entity.id}, ID, #{entity.user.id, jdbcType=VARCHAR}, #{entity.role, jdbcType=VARCHAR}, #{entity.creator.id, jdbcType=VARCHAR},
			#{entity.createTime, jdbcType=DECIMAL}, #{entity.isDeleted, jdbcType=CHAR}, #{entity.version, jdbcType=DECIMAL}  
			from COURSE  
			where ID in 
			<foreach collection="cids" open="(" close=")" separator="," item="item">
				#{item}
			</foreach>
		</if>
	</insert>
	<update id="deleteBatch" parameterType="map">
		update COURSE_AUTHORIZE
		set IS_DELETED = 'Y', UPDATE_TIME = #{entity.updateTime, jdbcType=DECIMAL}
		<if test="entity.updatedby != null and entity.updatedby.id != null">
			,UPDATEDBY = #{entity.updatedby.id, jdbcType=VARCHAR}
		</if>
		where ID in 
		<foreach collection="ids" open="(" close=")" separator="," item="item">
			#{item}
		</foreach>
	</update>
	<update id="deleteByLogic" parameterType="map">
		update COURSE_AUTHORIZE
		set IS_DELETED = 'Y', UPDATE_TIME = #{entity.updateTime, jdbcType=TIMESTAMP}
		<if test="entity.updatedby != null and entity.updatedby.id != null and entity.updatedby.id != ''">
			,UPDATEDBY = #{entity.updatedby.id, jdbcType=VARCHAR}
		</if>
		where ID in 
		<foreach collection="ids" open="(" close=")" item="item" separator=",">
			#{item}
		</foreach>
	</update>
</mapper>